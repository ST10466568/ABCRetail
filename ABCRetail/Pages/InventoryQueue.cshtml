@page
@model ABCRetail.Pages.InventoryQueueModel
@{
    ViewData["Title"] = "Inventory Queue Management";
}

<div class="container-fluid">
    <!-- Header with Real-time Status -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="alert alert-info d-flex justify-content-between align-items-center" role="alert">
                <div>
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Real-time Queue Monitoring</strong> - Last updated: <span id="lastUpdateTime">@DateTime.Now.ToString("HH:mm:ss")</span>
                </div>
                <div>
                    <span class="badge bg-success me-2" id="connectionStatus">
                        <i class="fas fa-wifi me-1"></i>Connected
                    </span>
                    <span class="badge bg-primary" id="autoRefreshStatus">
                        <i class="fas fa-sync-alt me-1"></i>Auto-refresh: ON
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fas fa-queue me-2"></i>Inventory Queue Management
                    </h4>
                    <div>
                        <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#sendMessageModal">
                            <i class="fas fa-plus me-1"></i>Send Message
                        </button>
                        <button type="button" class="btn btn-secondary me-2" onclick="refreshQueue()">
                            <i class="fas fa-sync-alt me-1"></i>Refresh
                        </button>
                        <button type="button" class="btn btn-warning me-2" onclick="clearQueue()">
                            <i class="fas fa-trash me-1"></i>Clear Queue
                        </button>
                        <button type="button" class="btn btn-info" onclick="toggleAutoRefresh()">
                            <i class="fas fa-pause me-1" id="autoRefreshIcon"></i><span id="autoRefreshText">Pause</span>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Enhanced Queue Statistics -->
                    <div class="row mb-4">
                        <div class="col-md-2">
                            <div class="kpi-card text-center bg-primary text-white">
                                <div class="kpi-value">@Model.QueueLength</div>
                                <div class="kpi-label">Total Messages</div>
                                <div class="kpi-trend">
                                    <i class="fas fa-arrow-up text-success"></i>
                                    <small>+5 today</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="kpi-card text-center bg-success text-white">
                                <div class="kpi-value">@Model.PendingCount</div>
                                <div class="kpi-label">Pending</div>
                                <div class="kpi-trend">
                                    <i class="fas fa-clock text-warning"></i>
                                    <small>Awaiting</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="kpi-card text-center bg-warning text-white">
                                <div class="kpi-value">@Model.ProcessingCount</div>
                                <div class="kpi-label">Processing</div>
                                <div class="kpi-trend">
                                    <i class="fas fa-cog fa-spin text-info"></i>
                                    <small>Active</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="kpi-card text-center bg-info text-white">
                                <div class="kpi-value">@Model.CompletedCount</div>
                                <div class="kpi-label">Completed</div>
                                <div class="kpi-trend">
                                    <i class="fas fa-check text-success"></i>
                                    <small>Done</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="kpi-card text-center bg-danger text-white">
                                <div class="kpi-value" id="urgentCount">0</div>
                                <div class="kpi-label">Urgent</div>
                                <div class="kpi-trend">
                                    <i class="fas fa-exclamation-triangle text-warning"></i>
                                    <small>Priority</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="kpi-card text-center bg-secondary text-white">
                                <div class="kpi-value" id="avgProcessingTime">0s</div>
                                <div class="kpi-label">Avg Process</div>
                                <div class="kpi-trend">
                                    <i class="fas fa-stopwatch text-info"></i>
                                    <small>Time</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Message Type Distribution Chart -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="fas fa-chart-pie me-2"></i>Message Type Distribution</h6>
                                </div>
                                <div class="card-body">
                                    <canvas id="messageTypeChart" width="400" height="200"></canvas>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0"><i class="fas fa-chart-line me-2"></i>Queue Activity (Last 24h)</h6>
                                </div>
                                <div class="card-body">
                                    <canvas id="queueActivityChart" width="400" height="200"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Enhanced Messages Table -->
                    <div class="card">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0"><i class="fas fa-list me-2"></i>Queue Messages</h6>
                                <div class="d-flex align-items-center">
                                    <input type="text" class="form-control form-control-sm me-2" id="searchInput" placeholder="Search messages...">
                                    <select class="form-select form-select-sm me-2" id="filterType">
                                        <option value="">All Types</option>
                                        <option value="low_stock_alert">Low Stock Alert</option>
                                        <option value="inventory_update">Inventory Update</option>
                                        <option value="restock_request">Restock Request</option>
                                        <option value="inventory_audit">Inventory Audit</option>
                                        <option value="out_of_stock_alert">Out of Stock Alert</option>
                                    </select>
                                    <select class="form-select form-select-sm me-2" id="filterPriority">
                                        <option value="">All Priorities</option>
                                        <option value="low">Low</option>
                                        <option value="normal">Normal</option>
                                        <option value="high">High</option>
                                        <option value="urgent">Urgent</option>
                                    </select>
                                    <select class="form-select form-select-sm me-2" id="pageSizeSelector" onchange="changePageSize(this.value)">
                                        <option value="5">5 per page</option>
                                        <option value="10">10 per page</option>
                                        <option value="20">20 per page</option>
                                        <option value="50">50 per page</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover" id="messagesTable">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Type</th>
                                            <th>Product</th>
                                            <th>Action</th>
                                            <th>Quantity</th>
                                            <th>Priority</th>
                                            <th>Status</th>
                                            <th>Timestamp</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model.PaginatedMessages.Any())
                                        {
                                            @foreach (var message in Model.PaginatedMessages)
                                            {
                                                <tr class="message-row" data-message-id="@message.Id" data-type="@message.Type" data-priority="@message.Priority">
                                                    <td>
                                                        <small class="text-muted">@(message.Id.Length > 8 ? message.Id.Substring(0, 8) + "..." : message.Id)</small>
                                                        <button class="btn btn-sm btn-outline-secondary ms-1" onclick="copyToClipboard('@message.Id')" title="Copy ID">
                                                            <i class="fas fa-copy"></i>
                                                        </button>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-secondary">@message.Type</span>
                                                    </td>
                                                    <td>
                                                        <strong>@message.ProductName</strong>
                                                        @if (!string.IsNullOrEmpty(message.ProductId))
                                                        {
                                                            <br><small class="text-muted">ID: @(message.ProductId.Length > 8 ? message.ProductId.Substring(0, 8) + "..." : message.ProductId)</small>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-info">@message.Action</span>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-primary">@message.Quantity</span>
                                                    </td>
                                                    <td>
                                                        @{
                                                            var priorityClass = message.Priority switch
                                                            {
                                                                "urgent" => "bg-danger",
                                                                "high" => "bg-warning",
                                                                "normal" => "bg-primary",
                                                                "low" => "bg-secondary",
                                                                _ => "bg-secondary"
                                                            };
                                                        }
                                                        <span class="badge @priorityClass">@message.Priority</span>
                                                    </td>
                                                    <td>
                                                        @{
                                                            var statusClass = message.Status switch
                                                            {
                                                                "completed" => "bg-success",
                                                                "processing" => "bg-warning",
                                                                "failed" => "bg-danger",
                                                                _ => "bg-secondary"
                                                            };
                                                        }
                                                        <span class="badge @statusClass">@message.Status</span>
                                                    </td>
                                                    <td>
                                                        <small class="text-muted">@message.Timestamp.ToString("MM/dd HH:mm")</small>
                                                        <br><small class="text-muted">@message.Timestamp.ToString("ss")s ago</small>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <button type="button" class="btn btn-outline-primary" onclick="viewMessage('@message.Id')" title="View Details">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                            <button type="button" class="btn btn-outline-warning" onclick="editMessage('@message.Id')" title="Edit Message">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <button type="button" class="btn btn-outline-danger" onclick="deleteMessage('@message.Id', '@message.PopReceipt')" title="Delete Message">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="9" class="text-center text-muted">
                                                    <i class="fas fa-inbox fa-3x mb-3"></i>
                                                    <br>No messages in queue
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                                
                                <!-- Pagination Controls -->
                                @if (Model.TotalPages > 1)
                                {
                                    <div class="d-flex justify-content-between align-items-center mt-3">
                                        <div class="text-muted">
                                            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalMessages) of @Model.TotalMessages messages
                                        </div>
                                        <nav aria-label="Queue messages pagination">
                                            <ul class="pagination pagination-sm mb-0">
                                                <!-- Previous Page -->
                                                @if (Model.HasPreviousPage)
                                                {
                                                    <li class="page-item">
                                                        <a class="page-link" href="?CurrentPage=@(Model.CurrentPage - 1)" aria-label="Previous">
                                                            <i class="fas fa-chevron-left"></i>
                                                        </a>
                                                    </li>
                                                }
                                                else
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">
                                                            <i class="fas fa-chevron-left"></i>
                                                        </span>
                                                    </li>
                                                }
                                                
                                                <!-- Page Numbers -->
                                                @{
                                                    var startPage = Math.Max(1, Model.CurrentPage - 2);
                                                    var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                                                }
                                                
                                                @if (startPage > 1)
                                                {
                                                    <li class="page-item">
                                                        <a class="page-link" href="?CurrentPage=1">1</a>
                                                    </li>
                                                    @if (startPage > 2)
                                                    {
                                                        <li class="page-item disabled">
                                                            <span class="page-link">...</span>
                                                        </li>
                                                    }
                                                }
                                                
                                                @for (int i = startPage; i <= endPage; i++)
                                                {
                                                    var pageNumber = i;
                                                    if (pageNumber == Model.CurrentPage)
                                                    {
                                                        <li class="page-item active">
                                                            <span class="page-link">@pageNumber</span>
                                                        </li>
                                                    }
                                                    else
                                                    {
                                                        <li class="page-item">
                                                            <a class="page-link" href="?CurrentPage=@pageNumber">@pageNumber</a>
                                                        </li>
                                                    }
                                                }
                                                
                                                @if (endPage < Model.TotalPages)
                                                {
                                                    @if (endPage < Model.TotalPages - 1)
                                                    {
                                                        <li class="page-item disabled">
                                                            <span class="page-link">...</span>
                                                        </li>
                                                    }
                                                    <li class="page-item">
                                                        <a class="page-link" href="?CurrentPage=@Model.TotalPages">@Model.TotalPages</a>
                                                    </li>
                                                }
                                                
                                                <!-- Next Page -->
                                                @if (Model.HasNextPage)
                                                {
                                                    <li class="page-item">
                                                        <a class="page-link" href="?CurrentPage=@(Model.CurrentPage + 1)" aria-label="Next">
                                                            <i class="fas fa-chevron-right"></i>
                                                        </a>
                                                    </li>
                                                }
                                                else
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">
                                                            <i class="fas fa-chevron-right"></i>
                                                        </span>
                                                    </li>
                                                }
                                            </ul>
                                        </nav>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Send Message Modal -->
<div class="modal fade" id="sendMessageModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus me-2"></i>Send Inventory Message
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="sendMessageForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="messageType" class="form-label">Message Type *</label>
                                <select class="form-select" id="messageType" required>
                                    <option value="">Select Type</option>
                                    <option value="low_stock_alert">Low Stock Alert</option>
                                    <option value="inventory_update">Inventory Update</option>
                                    <option value="restock_request">Restock Request</option>
                                    <option value="inventory_audit">Inventory Audit</option>
                                    <option value="out_of_stock_alert">Out of Stock Alert</option>
                                    <option value="custom">Custom Message</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="productId" class="form-label">Product ID</label>
                                <input type="text" class="form-control" id="productId" placeholder="Enter product ID">
                            </div>
                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name *</label>
                                <input type="text" class="form-control" id="productName" required placeholder="Enter product name">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="action" class="form-label">Action *</label>
                                <select class="form-select" id="action" required>
                                    <option value="">Select Action</option>
                                    <option value="alert">Alert</option>
                                    <option value="update">Update</option>
                                    <option value="request">Request</option>
                                    <option value="audit">Audit</option>
                                    <option value="add">Add</option>
                                    <option value="remove">Remove</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="quantity" class="form-label">Quantity</label>
                                <input type="number" class="form-control" id="quantity" value="0" min="0">
                            </div>
                            <div class="mb-3">
                                <label for="priority" class="form-label">Priority</label>
                                <select class="form-select" id="priority">
                                    <option value="normal">Normal</option>
                                    <option value="low">Low</option>
                                    <option value="high">High</option>
                                    <option value="urgent">Urgent</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="notes" class="form-label">Notes</label>
                        <textarea class="form-control" id="notes" rows="3" placeholder="Enter additional notes..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="sendMessage()">
                    <i class="fas fa-paper-plane me-1"></i>Send Message
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Message Details Modal -->
<div class="modal fade" id="messageDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-eye me-2"></i>Message Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="messageDetailsContent">
                <!-- Message details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced CSS -->
<style>
    .kpi-card {
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
    }
    
    .kpi-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    
    .kpi-value {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .kpi-label {
        font-size: 0.9rem;
        opacity: 0.9;
        margin-bottom: 0.5rem;
    }
    
    .kpi-trend {
        font-size: 0.8rem;
        opacity: 0.8;
    }
    
    .message-row:hover {
        background-color: rgba(0,123,255,0.05);
    }
    
    .badge {
        font-size: 0.8rem;
    }
    
    .table th {
        background-color: #f8f9fa;
        border-top: none;
        font-weight: 600;
    }
    
    .btn-group-sm .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    
    .alert {
        border-left: 4px solid;
    }
    
    .alert-info {
        border-left-color: #17a2b8;
    }
    
    .alert-success {
        border-left-color: #28a745;
    }
    
    .alert-warning {
        border-left-color: #ffc107;
    }
    
    .alert-danger {
        border-left-color: #dc3545;
    }
</style>

<!-- Enhanced JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let autoRefreshInterval;
    let autoRefreshEnabled = true;
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
        initializeCharts();
        startAutoRefresh();
        updateStatistics();
        
        // Set the correct page size in the selector
        const currentPageSize = @Model.PageSize;
        const pageSizeSelector = document.getElementById('pageSizeSelector');
        if (pageSizeSelector) {
            pageSizeSelector.value = currentPageSize.toString();
        }
    });
    
    // Auto-refresh functionality
    function startAutoRefresh() {
        autoRefreshInterval = setInterval(() => {
            if (autoRefreshEnabled) {
                refreshQueue();
            }
        }, 30000); // Refresh every 30 seconds
    }
    
    function toggleAutoRefresh() {
        autoRefreshEnabled = !autoRefreshEnabled;
        const icon = document.getElementById('autoRefreshIcon');
        const text = document.getElementById('autoRefreshText');
        
        if (autoRefreshEnabled) {
            icon.className = 'fas fa-pause me-1';
            text.textContent = 'Pause';
            document.getElementById('autoRefreshStatus').className = 'badge bg-primary';
            document.getElementById('autoRefreshStatus').innerHTML = '<i class="fas fa-sync-alt me-1"></i>Auto-refresh: ON';
        } else {
            icon.className = 'fas fa-play me-1';
            text.textContent = 'Resume';
            document.getElementById('autoRefreshStatus').className = 'badge bg-secondary';
            document.getElementById('autoRefreshStatus').innerHTML = '<i class="fas fa-sync-alt me-1"></i>Auto-refresh: OFF';
        }
    }
    
    // Initialize charts
    function initializeCharts() {
        // Message Type Distribution Chart
        const typeCtx = document.getElementById('messageTypeChart').getContext('2d');
        new Chart(typeCtx, {
            type: 'doughnut',
            data: {
                labels: ['Low Stock', 'Inventory Update', 'Restock Request', 'Audit', 'Out of Stock'],
                datasets: [{
                    data: [30, 25, 20, 15, 10],
                    backgroundColor: ['#dc3545', '#28a745', '#ffc107', '#17a2b8', '#6c757d']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });
        
        // Queue Activity Chart
        const activityCtx = document.getElementById('queueActivityChart').getContext('2d');
        new Chart(activityCtx, {
            type: 'line',
            data: {
                labels: ['00:00', '04:00', '08:00', '12:00', '16:00', '20:00'],
                datasets: [{
                    label: 'Messages',
                    data: [45, 52, 48, 65, 78, 89],
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.1)',
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }
    
    // Update statistics
    function updateStatistics() {
        // Update urgent count
        const urgentRows = document.querySelectorAll('.message-row[data-priority="urgent"]');
        document.getElementById('urgentCount').textContent = urgentRows.length;
        
        // Update last update time
        document.getElementById('lastUpdateTime').textContent = new Date().toLocaleTimeString();
    }
    
    // Enhanced refresh function
    function refreshQueue() {
        // Preserve current page when refreshing
        const currentPage = new URLSearchParams(window.location.search).get('CurrentPage') || 1;
        window.location.href = window.location.pathname + '?CurrentPage=' + currentPage;
    }
    
    // Enhanced clear queue function
    function clearQueue() {
        if (confirm('Are you sure you want to clear all messages from the queue? This action cannot be undone.')) {
            fetch('/InventoryQueue?handler=ClearQueue', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message || 'Queue cleared successfully!', 'success');
                    setTimeout(() => window.location.href = window.location.pathname, 1000);
                } else {
                    showAlert('Failed to clear queue: ' + (data.error || data.message || 'Unknown error'), 'danger');
                }
            })
            .catch(error => {
                showAlert('Error clearing queue: ' + error.message, 'danger');
            });
        }
    }
    
    // Send message function
    function sendMessage() {
        const form = document.getElementById('sendMessageForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const messageData = {
            type: document.getElementById('messageType').value,
            productId: document.getElementById('productId').value,
            productName: document.getElementById('productName').value,
            action: document.getElementById('action').value,
            quantity: parseInt(document.getElementById('quantity').value),
            priority: document.getElementById('priority').value,
            notes: document.getElementById('notes').value
        };
        
        fetch('/InventoryQueue?handler=SendMessage', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(messageData)
        })
        .then(response => response.json())
                    .then(data => {
                if (data.success) {
                    showAlert(data.message || 'Message sent successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('sendMessageModal')).hide();
                    setTimeout(() => window.location.href = window.location.pathname, 1000);
                } else {
                    showAlert('Failed to send message: ' + (data.error || data.message || 'Unknown error'), 'danger');
                }
            })
        .catch(error => {
            showAlert('Error sending message: ' + error.message, 'danger');
        });
    }
    
    // View message details
    function viewMessage(messageId) {
        fetch(`/InventoryQueue?handler=GetMessage&id=${messageId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const message = data.message;
                document.getElementById('messageDetailsContent').innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>ID:</strong> ${message.id}</p>
                            <p><strong>Type:</strong> <span class="badge bg-secondary">${message.type}</span></p>
                            <p><strong>Product:</strong> ${message.productName}</p>
                            <p><strong>Action:</strong> <span class="badge bg-info">${message.action}</span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Quantity:</strong> <span class="badge bg-primary">${message.quantity}</span></p>
                            <p><strong>Priority:</strong> <span class="badge bg-warning">${message.priority}</span></p>
                            <p><strong>Status:</strong> <span class="badge bg-secondary">${message.status}</span></p>
                            <p><strong>Timestamp:</strong> ${new Date(message.timestamp).toLocaleString()}</p>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <p><strong>Notes:</strong></p>
                            <p class="text-muted">${message.notes || 'No notes provided'}</p>
                        </div>
                    </div>
                `;
                new bootstrap.Modal(document.getElementById('messageDetailsModal')).show();
            } else {
                showAlert('Failed to load message details: ' + data.message, 'danger');
            }
        })
        .catch(error => {
            showAlert('Error loading message details: ' + error.message, 'danger');
        });
    }
    
    // Edit message function
    function editMessage(messageId) {
        // Implementation for editing messages
        showAlert('Edit functionality coming soon!', 'info');
    }
    
    // Delete message function
    function deleteMessage(messageId, popReceipt) {
        if (confirm('Are you sure you want to delete this message?')) {
            fetch('/InventoryQueue?handler=DeleteMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id: messageId, popReceipt: popReceipt })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('Message deleted successfully!', 'success');
                    setTimeout(() => {
                        const currentPage = new URLSearchParams(window.location.search).get('CurrentPage') || 1;
                        const pageSize = new URLSearchParams(window.location.search).get('PageSize') || 5;
                        window.location.href = window.location.pathname + '?CurrentPage=' + currentPage + '&PageSize=' + pageSize;
                    }, 1000);
                } else {
                    showAlert('Failed to delete message: ' + data.message, 'danger');
                }
            })
            .catch(error => {
                showAlert('Error deleting message: ' + error.message, 'danger');
            });
        }
    }
    
    // Copy to clipboard function
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            showAlert('Copied to clipboard!', 'success');
        }).catch(() => {
            showAlert('Failed to copy to clipboard', 'danger');
        });
    }
    
    // Search and filter functionality
    document.getElementById('searchInput').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('.message-row');
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });
    
    document.getElementById('filterType').addEventListener('change', function() {
        filterMessages();
    });
    
    document.getElementById('filterPriority').addEventListener('change', function() {
        filterMessages();
    });
    
    function filterMessages() {
        const typeFilter = document.getElementById('filterType').value;
        const priorityFilter = document.getElementById('filterPriority').value;
        const rows = document.querySelectorAll('.message-row');
        
        rows.forEach(row => {
            const type = row.dataset.type;
            const priority = row.dataset.priority;
            const typeMatch = !typeFilter || type === typeFilter;
            const priorityMatch = !priorityFilter || priority === priorityFilter;
            
            row.style.display = typeMatch && priorityMatch ? '' : 'none';
        });
    }
    
    // Utility function to show alerts
    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.row'));
        
        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }
    
    // Change page size function
    function changePageSize(newPageSize) {
        const currentPage = new URLSearchParams(window.location.search).get('CurrentPage') || 1;
        const url = new URL(window.location);
        url.searchParams.set('PageSize', newPageSize);
        url.searchParams.set('CurrentPage', '1'); // Reset to first page when changing page size
        window.location.href = url.toString();
    }
</script>
